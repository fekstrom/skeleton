if(TARGET Skeleton::Skeleton)
  return()
endif()

macro(skeleton_report_not_found reason)
  set(Skeleton_FOUND FALSE)
  if(NOT Skeleton_FIND_QUIETLY)
    message(STATUS "Failed to configure Skeleton: ${reason}" ${ARGN})
  elseif(Skeleton_FIND_REQUIRED)
    message(FATAL_ERROR "Failed to configure Skeleton: ${reason}" ${ARGN})
  else()
    message(SEND_ERROR "Failed to configure Skeleton: ${reason}" ${ARGN})
  endif()
endmacro()

function(Skeleton_message)
  if(NOT Skeleton_FIND_QUIETLY)
    message(${ARGN})
  endif()
endfunction()

@PACKAGE_INIT@

set(Skeleton_EIGEN_VERSION @Eigen3_VERSION@)

include(CMakeFindDependencyMacro)
find_dependency(Eigen3 ${Skeleton_EIGEN_VERSION} CONFIG)

if(Eigen3_FOUND)
  if(NOT Eigen3_VERSION VERSION_EQUAL Skeleton_EIGEN_VERSION)
    skeleton_report_not_found(
      "The found Eigen version ${Eigen3_VERSION} doesn't exactly match the "
      "Eigen version ${Skeleton_EIGEN_VERSION} that Skeleton "
      "was built with. This can lead to undefined behaivior by "
      "violating the one definition rule."
    )
  endif()
endif()

include(${CMAKE_CURRENT_LIST_DIR}/SkeletonExport.cmake)

check_required_components(Skeleton)

Skeleton_message(STATUS "Found Skeleton: ${CMAKE_CURRENT_LIST_DIR}")
